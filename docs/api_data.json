[  {    "type": "POST",    "url": "/:modelName",    "title": "新增接口（默认）",    "name": "ModelCreate",    "description": "<p>模型默认新增接口 - 该接口无法在线测试，请直接按照元数据结构指定请求体接口；请求体可为对象或者对象数组结构，分别表示单个新增和批量新增</p>",    "group": "Model",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "modelName",            "description": "<p>模型/元数据名称（对应元数据结构中的name值）</p>"          }        ]      },      "examples": [        {          "title": "示例元数据结构",          "content": "{\n    \"name\": \"Param\",\n    \"displayName\": \"系统参数\",\n    \"jsonSchema\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"_id\": {\n                \"type\": \"string\"\n            },\n            \"code\": {\n                \"type\": \"string\",\n                \"required\": true,\n                \"displayName\": \"参数编码\"\n            },\n            \"name\": {\n                \"type\": \"string\",\n                \"required\": true,\n               \"displayName\": \"参数名称\"\n            },\n            \"value\": {\n                \"type\": \"any\",\n                \"required\": true,\n                \"displayName\": \"参数值\"\n            }\n       }\n    }\n}",          "type": "json"        },        {          "title": "新增示例",          "content": "示例列表：\n    1.单个新增\n        {\n           \"code\": \"xxx\",\n           \"name\": \"xxx\",\n           \"value\": \"xxx\"\n        }\n\n    2.批量新增\n        [\n            {\n                \"code\": \"xxx\",\n                \"name\": \"xxx\",\n                \"value\": \"xxx\"\n            },\n            {\n                \"code\": \"xxx\",\n                \"name\": \"xxx\",\n                \"value\": \"xxx\"\n            }\n        ]",          "type": "json"        }      ]    },    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "allowedValues": [              "\"application/json\""            ],            "optional": false,            "field": "Content-Type",            "defaultValue": "application/json",            "description": "<p>请求内容类型</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Array",            "optional": false,            "field": "data",            "description": "<p>数据对象（不论是单个新增还是批量新增，都统一返回对象数组；具体的数据结构请查看参考模型的元数据信息）</p>"          }        ]      },      "examples": [        {          "title": "正常返回",          "content": "HTTP/1.1 200 OK\n{\n    \"data\": [\n        {\n           \"_id\": \"xxx\",\n           \"code\": \"xxx\",\n           \"name\": \"xxx\",\n           \"value\": \"xxx\"\n        },\n        {\n           \"_id\": \"xxx\",\n           \"code\": \"xxx\",\n           \"name\": \"xxx\",\n           \"value\": \"xxx\"\n        }\n   ]\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "src/docs/model/ModelCreate.js",    "groupTitle": "Model"  },  {    "type": "GET",    "url": "/:modelName/id",    "title": "ID查询（默认）",    "name": "ModelId",    "description": "<p>模型默认ID查询接口 - 该接口只能根据ID进行查询</p>",    "group": "Model",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "allowedValues": [              "\"application/json\""            ],            "optional": false,            "field": "Content-Type",            "defaultValue": "application/json",            "description": "<p>请求内容类型</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "modelName",            "description": "<p>模型/元数据名称（对应元数据结构中的name值）</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "val",            "description": "<p>数据ID</p>"          }        ]      },      "examples": [        {          "title": "示例元数据结构",          "content": "{\n    \"name\": \"Param\",\n    \"displayName\": \"系统参数\",\n    \"jsonSchema\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"_id\": {\n                \"type\": \"string\"\n            },\n            \"code\": {\n                \"type\": \"string\",\n                \"required\": true,\n                \"displayName\": \"参数编码\"\n            },\n            \"name\": {\n                \"type\": \"string\",\n                \"required\": true,\n               \"displayName\": \"参数名称\"\n            },\n            \"value\": {\n                \"type\": \"any\",\n                \"required\": true,\n                \"displayName\": \"参数值\"\n            }\n       }\n    }\n}",          "type": "json"        },        {          "title": "查询示例",          "content": "示例列表：\n    1.查询ID为\"5a376d27cd84d14e4446ce56\"的数据\n        http://test.domain.com/api/param/id?val=5a376d27cd84d14e4446ce56",          "type": "json"        }      ]    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "data",            "description": "<p>数据对象（具体的数据结构请查看参考模型的元数据信息）</p>"          }        ]      },      "examples": [        {          "title": "正常返回",          "content": "HTTP/1.1 200 OK\n{\n    \"data\": {\n        \"_id\": \"xxx\",\n        \"code\": \"xxx\",\n        \"name\": \"xxx\",\n        \"value\": \"xxx\"\n    }\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "src/docs/model/ModelId.js",    "groupTitle": "Model",    "sampleRequest": [      {        "url": "http://localhost:3000/api/:modelName/id"      }    ]  },  {    "type": "GET",    "url": "/:modelName",    "title": "列表查询（默认）",    "name": "ModelList",    "description": "<p>模型默认列表查询接口</p>",    "group": "Model",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "allowedValues": [              "\"application/json\""            ],            "optional": false,            "field": "Content-Type",            "defaultValue": "application/json",            "description": "<p>请求内容类型</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "modelName",            "description": "<p>模型/元数据名称（对应元数据结构中的name值）</p>"          },          {            "group": "Parameter",            "type": "String",            "allowedValues": [              "\"PAGE\"",              "\"ALL\"",              "\"ONE\""            ],            "optional": false,            "field": "range",            "description": "<p>查询模式（&quot;PAGE&quot;表示分页查询；&quot;ALL&quot;表示全部模式）</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "sort",            "description": "<p>排序字符串（指定排序的key值，格式为&quot;-created,code&quot;，负号开头表示逆序）</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": false,            "field": "page",            "description": "<p>页码（分页属性，从1开始，ALL模式可忽略）</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": false,            "field": "size",            "description": "<p>每页条数（分页属性，ALL模式可忽略）</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "project",            "description": "<p>字段过滤字符串（指定字段的key值；例如&quot;code,name&quot;，表示只返回&quot;code&quot;和&quot;name&quot;的字段；也可通过负号开头过滤某些字段&quot;-password,-username&quot;）</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "cond",            "description": "<p>查询条件字符串（JSON字符串格式，例如{&quot;code&quot;:&quot;123&quot;,&quot;name&quot;:&quot;测试&quot;}，其中&quot;code&quot;和&quot;name&quot;为属性key，可用的属性key请参考模型的元数据结构）</p>"          }        ]      },      "examples": [        {          "title": "示例元数据结构",          "content": "{\n    \"name\": \"Param\",\n    \"displayName\": \"系统参数\",\n    \"jsonSchema\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"_id\": {\n                \"type\": \"string\"\n            },\n            \"code\": {\n                \"type\": \"string\",\n                \"required\": true,\n                \"displayName\": \"参数编码\"\n            },\n            \"name\": {\n                \"type\": \"string\",\n                \"required\": true,\n               \"displayName\": \"参数名称\"\n            },\n            \"value\": {\n                \"type\": \"any\",\n                \"required\": true,\n                \"displayName\": \"参数值\"\n            },\n            \"creator\": {\n                \"type\": \"string\",\n                \"required\": true,\n                \"default\": \"super\",\n                \"displayName\": \"创建人\"\n            },\n            \"createdAt\": {\n                \"type\": \"number\",\n                \"displayName\": \"创建时间（Unix时间戳）\"\n            },\n            \"modifier\": {\n                \"type\": \"string\",\n                \"displayName\": \"修改人\"\n            },\n            \"updatedAt\": {\n                \"type\": \"number\",\n                \"displayName\": \"修改时间（Unix时间戳）\"\n            },\n            \"dr\": {\n                \"type\": \"boolean\",\n                \"default\": false,\n                \"displayName\": \"删除标记\"\n            }\n       }\n    }\n}",          "type": "json"        },        {          "title": "常规查询示例",          "content": "操作符说明：\n    $exists：是否存在\n    $in：包含\n    $nin：不包含\n\n示例列表：\n    1.查询参数编码为\"1001\"且参数名称为\"测试\"的数据\n        http://test.domain.com/api/param?cond={\"code\":\"1001\",\"name\":\"测试\"}\n\n    2.查询创建人和创建时间皆不为空的数据\n        http://test.domain.com/api/param?cond={\"creator\":{\"$exists\":true},\"createdAt\":{\"$exists\":true}}\n\n    3.查询参数编码为\"1001\"、\"1008\"或\"b101\"的数据\n        http://test.domain.com/api/param?cond={\"code\":{\"$in\":[\"1001\",\"1008\",\"b101\"]}}\n\n    4.查询参数编码不为\"1001\"、\"1008\"或\"b101\"的数据\n        http://test.domain.com/api/param?cond={\"code\":{\"$nin\":[\"1001\",\"1008\",\"b101\"]}}",          "type": "json"        },        {          "title": "模糊查询示例",          "content": "操作符说明：\n    $regex：正则表达式字符串，与\"new RegExp(str)\"所填写的部分\"str\"格式一致\n    $options：i忽略大小写、m多行匹配、s允许使用点字符（\".\"）匹配包括换行符在内的所有字符\n\n示例列表：\n    1.查询参数编码为\"1001\"且参数名称包含\"Abc\"关键字的数据（忽略大小写且匹配多行）\n        http://test.domain.com/api/param?cond={\"code\":\"1001\",\"name\":{\"$regex\":\"Abc\",\"$options\":\"mi\"}}\n\n    2.查询参数编码为\"1001\"且参数名称包含\"Abc\"的数据（忽略大小写）\n        http://test.domain.com/api/param?cond={\"code\":\"1001\",\"name\":{\"$regex\":\"^Abc\",\"$options\":\"i\"}}\n\n    3.查询参数编码为\"1001\"且参数名称以\"abc\"开头的数据\n        http://test.domain.com/api/param?cond={\"code\":\"1001\",\"name\":{\"$regex\":\"^abc\"}}\n\n    4.查询参数编码为\"1001\"且参数名称以\"abc\"结尾的数据\n        http://test.domain.com/api/param?cond={\"code\":\"1001\",\"name\":{\"$regex\":\"abc$\"}}",          "type": "json"        },        {          "title": "分页查询",          "content": "场景说明：\n    对于文档较多的集合，可通过分页依次查询所需数据，需要注意的是，分页时一般需要指定一个排序条件\n\n示例列表：\n    1.按每页30条分页，并按创建时间逆序，查询第1页的数据\n        http://test.domain.com/api/param?size=30&page=1&sort=-createdAt\n\n    2.按每页50条分页，并按创建时间逆序，查询第19页的数据\n        http://test.domain.com/api/param?size=50&page=19&sort=-createdAt\n\n    3.查询创建时间大于\"1513602998\"的数据，并按每页50条分页，返回第3页的数据\n        http://test.domain.com/api/param?cond={\"createdAt\":{\"$gt\":1513602998}}&size=50&page=3\n\n    4.查询创建时间大于等于\"1513602998\"且修改时间小于等于\"1514736000\"的数据，并按每页50条分页，返回第19页的数据\n        http://test.domain.com/api/param?size=50&page=19&cond={\"$and\":[{\"createdAt\":{\"$gte\":1513602998}},{\"updatedAt\":{\"$lte\":1513602998}}]}",          "type": "json"        },        {          "title": "单个查询",          "content": "场景说明：\n    有时候你可能只需要返回一条记录，可指定range为\"ONE\"实现单个查询。\n    单个查询的请求参数与响应参数和分页查询完全一样，只是page和size都默认且只能固定为1。\n\n示例列表：\n    1.按创建时间逆序，只查询一条记录\n        http://test.domain.com/api/param?range=ONE&size=30&page=1&sort=-createdAt\n\n    2.查询创建时间大于\"1513602998\"的数据，并按创建时间逆序，只查询一条记录\n        http://test.domain.com/api/param?range=ONE&cond={\"createdAt\":{\"$gt\":1513602998}}&sort=-createdAt\n\n    3.查询创建时间大于等于\"1513602998\"且修改时间小于等于\"1514736000\"的数据，只查询一条记录\n        http://test.domain.com/api/param?range=ONE&cond={\"$and\":[{\"createdAt\":{\"$gte\":1513602998}},{\"updatedAt\":{\"$lte\":1513602998}}]}",          "type": "json"        },        {          "title": "排序查询",          "content": "示例列表：\n    1.按每页30条分页，并按创建时间逆序，查询第1页的数据\n        http://test.domain.com/api/param?size=30&page=1&sort=-createdAt\n\n    2.查询创建时间大于\"1513602998\"的数据，按每页50条分页，再按创建时间逆序修改时间升序排列，返回第3页的数据\n        http://test.domain.com/api/param?size=50&page=3&cond={\"createdAt\":{\"$gt\":1513602998}}&sort=-createdAt,updatedAt",          "type": "json"        },        {          "title": "指定字段查询",          "content": "场景说明：\n    1.对于文档信息较大的数据，有时候只需要其中某几个字段时，则可通过指定返回字段进行查询；有时候需要把一些大数据量的字段给过滤掉，则可以忽略某几个字段；\n    2.指定和过滤两种模式不能同时使用：project=code,name或project=-code,-name\n\n示例列表：\n    1.按每页30条分页，并按创建时间逆序，查询第5页的数据，只查询参数编码和参数名称信息\n        http://test.domain.com/api/param?size=30&page=5&sort=-createdAt&project=code,name\n\n    2.按每页30条分页，并按创建时间逆序，查询第5页的数据，不查询参数值、创建人和创建时间信息\n        http://test.domain.com/api/param?size=30&page=5&sort=-createdAt&project=-value,-creator,-createdAt",          "type": "json"        },        {          "title": "逻辑查询示例",          "content": "操作符说明：\n    $or：并集查询，$or参数的值为数组结构，其中每个数组元素皆为一个查询条件，只要被查询数据满足数组中的任一条件，则返回数据，即表示查询所有数组元素匹配的并集\n    $and：交集查询，$and参数的值也为数组结构，表示被查询数据必须满足数组中所有的条件才返回数据，即表示查询所有数组元素匹配的交集\n\n示例列表：\n    1.查询参数编码为\"1001\"且参数名称包含\"Abc\"的数据（忽略大小写）或创建人和创建时间皆不为空的数据\n        http://test.domain.com/api/param?cond={\"$or\":[{\"code\":\"1001\",\"name\":{\"$regex\":\"^Abc\",\"$options\":\"i\"}},{\"creator\":{\"$exists\":true},\"createdAt\":{\"$exists\":true}}]}\n\n    2.查询创建人为\"super\"且参数编码为\"1001\"或参数名称为\"1001\"的数据\n        http://test.domain.com/api/param?cond={\"creator\":\"super\",\"$or\":[{\"code\":\"1001\"},{\"name\":\"1001\"}]}\n\n    3.查询创建人为\"super\"、参数编码为\"1001\"和创建人为空、参数名称为\"1001\"的数据\n        http://test.domain.com/api/param?cond={\"$and\":[{\"creator\":\"super\",\"code\":\"1001\"},{\"creator\":{\"$exists\":false},\"name\":\"1001\"}]}\n\n    4.查询在创建人为\"super\"的前提下，创建时间为空、参数编码为\"1001\"和修改时间不为空、参数名称为\"1002\"的数据\n        http://test.domain.com/api/param?cond={\"creator\":\"super\",\"$and\":[{\"createdAt\":{\"$exists\":false},\"code\":\"1001\"},{\"updatedAt\":{\"$exists\":true},\"name\":\"1002\"}]}",          "type": "json"        },        {          "title": "数值查询示例",          "content": "操作符说明：\n    $gt：大于\n    $gte：大于等于\n    $lt：小于\n    $lte：小于等于\n    $eq：等于\n    $ne：不等于\n\n示例列表：\n    1.查询参数编码不等于\"A1001\"的数据\n        http://test.domain.com/api/param?cond={\"code\":{\"$eq\":\"A1001\"}}\n\n    2.查询删除标记不为\"true\"的数据\n        http://test.domain.com/api/param?cond={\"dr\":{\"$ne\":true}}\n\n    3.查询创建时间大于\"1513602998\"的数据\n        http://test.domain.com/api/param?cond={\"createdAt\":{\"$gt\":1513602998}}\n\n    4.查询创建时间大于等于\"1513602998\"且修改时间小于等于\"1514736000\"的数据\n        http://test.domain.com/api/param?cond={\"$and\":[{\"createdAt\":{\"$gte\":1513602998}},{\"updatedAt\":{\"$lte\":1513602998}}]}",          "type": "json"        }      ]    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "data",            "description": "<p>数据对象</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "data.range",            "description": "<p>查询模式（同请求参数）</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "data.sort",            "description": "<p>排序字符串（解析后的sort参数，若请求中有传递sort参数但返回值为空，表示解析sort参数失败，请检查sort参数的格式是否正确）</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "data.page",            "description": "<p>页码（同请求参数）</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "data.size",            "description": "<p>每页条数（同请求参数）</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "data.project",            "description": "<p>排序字符串（解析后的project参数，若请求中有传递project参数但返回值为空，表示解析project参数失败，请检查project参数的格式是否正确）</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "data.cond",            "description": "<p>查询字符串（解析后的cond参数，若请求中有传递cond参数但返回值为空，表示解析cond参数失败，请检查cond参数的格式是否正确）</p>"          },          {            "group": "Success 200",            "type": "Array",            "optional": false,            "field": "data.list",            "description": "<p>列表数据（对象数组，具体的数据结构请查看参考模型的元数据信息）</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "data.totalrecords",            "description": "<p>总数据条数</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "data.totalpages",            "description": "<p>总页数（页属性，ALL模式可忽略）</p>"          }        ]      },      "examples": [        {          "title": "正常返回",          "content": "HTTP/1.1 200 OK\n{\n    \"data\": {\n        \"cond\": {\n            \"code\": \"1001\"\n        },\n        \"project\": {\n            \"code\": 1,\n            \"name\": 1\n        },\n        \"page\": 1,\n        \"size\": 20,\n        \"range\": \"PAGE\",\n        \"sort\": {\n            \"_id\": 1\n        },\n        \"list\": [\n            {\n                \"_id\": \"5a376d27cd84d14e4446ce56\",\n                \"code\": \"1001\",\n                \"name\": \"测试名称\"\n            }\n        ],\n        \"totalrecords\": 1,\n        \"totalpages\": 1\n    }\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "src/docs/model/ModelList.js",    "groupTitle": "Model",    "sampleRequest": [      {        "url": "http://localhost:3000/api/:modelName"      }    ]  },  {    "type": "DELETE",    "url": "/:modelName",    "title": "删除接口（默认）",    "name": "ModelRemove",    "description": "<p>模型默认删除接口</p>",    "group": "Model",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "modelName",            "description": "<p>模型/元数据名称（对应元数据结构中的name值）</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "cond",            "description": "<p>删除条件（与查询接口的格式基本一致，区别在于这里是且只能是对象结构，这里只能是对象结构，对象结构，对象结构）</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": true,            "field": "options",            "description": "<p>删除选项</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "options.multi",            "description": "<p>是否批量删除（默认只会删除一条记录）</p>"          }        ]      },      "examples": [        {          "title": "示例元数据结构",          "content": "{\n    \"name\": \"Param\",\n    \"displayName\": \"系统参数\",\n    \"jsonSchema\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"_id\": {\n                \"type\": \"string\"\n            },\n            \"code\": {\n                \"type\": \"string\",\n                \"required\": true,\n                \"displayName\": \"参数编码\"\n            },\n            \"name\": {\n                \"type\": \"string\",\n                \"required\": true,\n               \"displayName\": \"参数名称\"\n            },\n            \"value\": {\n                \"type\": \"any\",\n                \"required\": true,\n                \"displayName\": \"参数值\"\n            }\n       }\n    }\n}",          "type": "json"        },        {          "title": "删除示例",          "content": "示例列表：\n    1.删除操作\n        {\n            \"cond\": {\n                \"_id\": \"5a37e9cd310819001a4cdb8f\"\n            }\n        }",          "type": "json"        }      ]    },    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "allowedValues": [              "\"application/json\""            ],            "optional": false,            "field": "Content-Type",            "defaultValue": "application/json",            "description": "<p>请求内容类型</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "data",            "description": "<p>删除结果对象（当ok为1且n大于等于1时，表示删除成功）</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "data.ok",            "description": "<p>删除命令执行状态，当值为1时，仅表示命令执行成功但并不确保数据已删除</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "data.n",            "description": "<p>被删除的数据条数</p>"          }        ]      },      "examples": [        {          "title": "正常返回",          "content": "HTTP/1.1 200 OK\n{\n    \"data\": {\n       \"n\": 1,\n       \"ok\": 1\n    }\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "src/docs/model/ModelRemove.js",    "groupTitle": "Model",    "sampleRequest": [      {        "url": "http://localhost:3000/api/:modelName"      }    ]  },  {    "type": "PUT",    "url": "/:modelName",    "title": "修改接口（默认）",    "name": "ModelUpdate",    "description": "<p>模型默认修改接口</p>",    "group": "Model",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "modelName",            "description": "<p>模型/元数据名称（对应元数据结构中的name值）</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "cond",            "description": "<p>更新条件（与查询接口的格式基本一致，区别在于这里是且只能是对象结构，这里只能是对象结构，对象结构，对象结构）</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "doc",            "description": "<p>更新对象（填写你需要更新的字段，也只能是对象结构；注意：不需要提供所有字段，只需提供被更新的字段，被更新的字段，被更新的字段即可）</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": true,            "field": "options",            "description": "<p>额外选项</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "options.multi",            "description": "<p>是否批量更新（默认只会更新一条记录）</p>"          }        ]      },      "examples": [        {          "title": "示例元数据结构",          "content": "{\n    \"name\": \"Param\",\n    \"displayName\": \"系统参数\",\n    \"jsonSchema\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"_id\": {\n                \"type\": \"string\"\n            },\n            \"code\": {\n                \"type\": \"string\",\n                \"required\": true,\n                \"displayName\": \"参数编码\"\n            },\n            \"name\": {\n                \"type\": \"string\",\n                \"required\": true,\n               \"displayName\": \"参数名称\"\n            },\n            \"value\": {\n                \"type\": \"any\",\n                \"required\": true,\n                \"displayName\": \"参数值\"\n            }\n       }\n    }\n}",          "type": "json"        },        {          "title": "修改示例",          "content": "示例列表：\n    1.修改操作\n        {\n            \"cond\": {\n                \"_id\": \"5a37e9cd310819001a4cdb8f\"\n            },\n            \"doc\": {\n                \"name\": \"参数A003\",\n                \"value\": \"参数值A3\"\n            }\n        }",          "type": "json"        }      ]    },    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "allowedValues": [              "\"application/json\""            ],            "optional": false,            "field": "Content-Type",            "defaultValue": "application/json",            "description": "<p>请求内容类型</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "data",            "description": "<p>更新后的数据对象（具体的数据结构请查看参考模型的元数据信息）</p>"          }        ]      },      "examples": [        {          "title": "正常返回",          "content": "HTTP/1.1 200 OK\n{\n    \"data\": {\n       \"_id\": \"5a37e9cd310819001a4cdb8f\",\n       \"code\": \"1003\",\n       \"name\": \"参数A003\",\n       \"value\": \"参数值A3\"\n    }\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "src/docs/model/ModelUpdate.js",    "groupTitle": "Model",    "sampleRequest": [      {        "url": "http://localhost:3000/api/:modelName"      }    ]  },  {    "type": "GET",    "url": "/metadata",    "title": "模型元数据查询",    "name": "Metadata",    "description": "<p>该接口主要用于在调用模型默认接口时，查询模型的字段结构</p>",    "group": "System",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "name",            "description": "<p>模型名称（不指定&quot;name&quot;则返回系统内所有的元数据）</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "data",            "description": "<p>数据对象（注意：该字段为对象或数组类型；当有指定&quot;name&quot;查询时，返回对象结构；当不指定&quot;name&quot;时，返回对象数组结构）</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "data.name",            "description": "<p>模型名称</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "data.displayName",            "description": "<p>模型显示名</p>"          },          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "data.jsonSchema",            "description": "<p>模型的元数据结构（为JSON-Schema格式）</p>"          }        ]      },      "examples": [        {          "title": "正常返回",          "content": "HTTP/1.1 200 OK\n{\n    \"data\": {\n        \"name\": \"Param\",\n        \"displayName\": \"系统参数\",\n        \"jsonSchema\": { ... }\n    }\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "src/docs/system/Metadata.js",    "groupTitle": "System",    "sampleRequest": [      {        "url": "http://localhost:3000/api/metadata"      }    ]  }]
